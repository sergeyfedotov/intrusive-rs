var searchIndex = {};
searchIndex["intrusive_collections"] = {"doc":"Intrusive collections for Rust.","items":[[3,"UnsafeRef","intrusive_collections","Unchecked shared pointer",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[11,"from_raw","","Creates an `UnsafeRef` from a raw pointer",1,null],[11,"into_raw","","Converts an `UnsafeRef` into a raw pointer",1,null],[11,"from_box","","Creates an `UnsafeRef` from a `Box`",1,{"inputs":[{"name":"box"}],"output":{"name":"unsaferef"}}],[11,"into_box","","Converts an `UnsafeRef` into a `Box`",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unsaferef"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw","","",1,null],[11,"from_raw","","",1,null],[0,"singly_linked_list","","Intrusive singly-linked list.",null,null],[3,"Link","intrusive_collections::singly_linked_list","Intrusive link that allows an object to be inserted into a `SinglyLinkedList`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a `SinglyLinkedList`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `SinglyLinkedList`.",null,null],[3,"SinglyLinkedList","","An intrusive singly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `SinglyLinkedList`.",null,null],[3,"IntoIter","","An iterator which consumes a `SinglyLinkedList`.",null,null],[11,"new","","Creates a new `Link`.",2,{"inputs":[],"output":{"name":"link"}}],[11,"is_linked","","Checks whether the `Link` is linked into a `SinglyLinkedList`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"force_unlink","","Forcibly unlinks an object from a `SinglyLinkedList`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"link"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"move_next","","Moves the cursor to the next element of the `SinglyLinkedList`.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",4,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"move_next","","Moves the cursor to the next element of the `SinglyLinkedList`.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_next","","Removes the next element from the `SinglyLinkedList`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_next_with","","Removes the next element from the `SinglyLinkedList` and inserts another object in its place.",4,null],[11,"insert_after","","Inserts a new element into the `SinglyLinkedList` after the current one.",4,null],[11,"splice_after","","Inserts the elements from the given `SinglyLinkedList` after the current one.",4,{"inputs":[{"name":"self"},{"name":"singlylinkedlist"}],"output":null}],[11,"split_after","","Splits the list into two after the current element. This will return a new list consisting of everything after the cursor, with the original list retaining everything before.",4,{"inputs":[{"name":"self"}],"output":{"name":"singlylinkedlist"}}],[11,"new","","Creates an empty `SinglyLinkedList`.",5,{"inputs":[{"name":"a"}],"output":{"name":"singlylinkedlist"}}],[11,"is_empty","","Returns `true if the`SinglyLinkedList` is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor","","Returns a null `Cursor` for this list.",5,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",5,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",5,null],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",5,null],[11,"front","","Returns a `Cursor` pointing to the first element of the list. If the list is empty then a null cursor is returned.",5,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the list. If the the list is empty then a null cursor is returned.",5,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"iter","","Gets an iterator over the objects in the `SinglyLinkedList`.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Removes all elements from the `SinglyLinkedList`.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fast_clear","","Empties the `SinglyLinkedList` without unlinking or freeing objects in it.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"take","","Takes all the elements out of the `SinglyLinkedList`, leaving it empty. The taken elements are returned as a new `SinglyLinkedList`.",5,{"inputs":[{"name":"self"}],"output":{"name":"singlylinkedlist"}}],[11,"push_front","","Inserts a new element at the start of the `SinglyLinkedList`.",5,null],[11,"pop_front","","Removes the first element of the `SinglyLinkedList`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"singlylinkedlist"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"linked_list","intrusive_collections","Intrusive doubly-linked list.",null,null],[3,"Link","intrusive_collections::linked_list","Intrusive link that allows an object to be inserted into a `LinkedList`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a `LinkedList`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `LinkedList`.",null,null],[3,"LinkedList","","An intrusive doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator which consumes a `LinkedList`.",null,null],[11,"new","","Creates a new `Link`.",8,{"inputs":[],"output":{"name":"link"}}],[11,"is_linked","","Checks whether the `Link` is linked into a `LinkedList`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"force_unlink","","Forcibly unlinks an object from a `LinkedList`.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"link"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"move_prev","","Moves the cursor to the previous element of the `LinkedList`.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",10,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"move_prev","","Moves the cursor to the previous element of the `LinkedList`.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes the current element from the `LinkedList`.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_with","","Removes the current element from the `LinkedList` and inserts another object in its place.",10,null],[11,"insert_after","","Inserts a new element into the `LinkedList` after the current one.",10,null],[11,"insert_before","","Inserts a new element into the `LinkedList` before the current one.",10,null],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the current one.",10,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":null}],[11,"splice_before","","Moves all element from the given `LinkedList` before the current one.",10,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":null}],[11,"split_after","","Splits the list into two after the current element. This will return a new list consisting of everything after the cursor, with the original list retaining everything before.",10,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"split_before","","Splits the list into two before the current element. This will return a new list consisting of everything before the cursor, with the original list retaining everything after.",10,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",11,{"inputs":[{"name":"a"}],"output":{"name":"linkedlist"}}],[11,"is_empty","","Returns `true if the`LinkedList` is empty.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor","","Returns a null `Cursor` for this list.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",11,null],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",11,null],[11,"front","","Returns a `Cursor` pointing to the first element of the list. If the list is empty then a null cursor is returned.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the list. If the the list is empty then a null cursor is returned.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"back","","Returns a `Cursor` pointing to the last element of the list. If the list is empty then a null cursor is returned.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the list. If the list is empty then a null cursor is returned.",11,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"iter","","Gets an iterator over the objects in the `LinkedList`.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Removes all elements from the `LinkedList`.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fast_clear","","Empties the `LinkedList` without unlinking or freeing objects in it.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"take","","Takes all the elements out of the `LinkedList`, leaving it empty. The taken elements are returned as a new `LinkedList`.",11,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"push_front","","Inserts a new element at the start of the `LinkedList`.",11,null],[11,"push_back","","Inserts a new element at the end of the `LinkedList`.",11,null],[11,"pop_front","","Removes the first element of the `LinkedList`.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last element of the `LinkedList`.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",11,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"rbtree","intrusive_collections","Intrusive red-black tree.",null,null],[3,"Link","intrusive_collections::rbtree","Intrusive link that allows an object to be inserted into a `RBTree`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a `RBTree`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `RBTree`.",null,null],[3,"RBTree","","An intrusive red-black tree.",null,null],[3,"InsertCursor","","A cursor pointing to a slot in which an element can be inserted into a `RBTree`.",null,null],[3,"Iter","","An iterator over references to the items of a `RBTree`.",null,null],[3,"IntoIter","","An iterator which consumes a `RBTree`.",null,null],[4,"Entry","","An entry in a `RBTree`.",null,null],[13,"Occupied","","An occupied entry.",14,null],[13,"Vacant","","A vacant entry.",14,null],[11,"new","","Creates a new `Link`.",15,{"inputs":[],"output":{"name":"link"}}],[11,"is_linked","","Checks whether the `Link` is linked into a `LinkedList`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"force_unlink","","Forcibly unlinks an object from a `RBTree`.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"link"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"is_null","","Checks if the cursor is currently pointing to the null object.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the object that the cursor is currently pointing to.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",17,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes the current element from the `RBTree`.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_with","","Removes the current element from the `RBTree` and inserts another object in its place.",17,null],[11,"insert_after","","Inserts a new element into the `RBTree` after the current one.",17,null],[11,"insert_before","","Inserts a new element into the `RBTree` before the current one.",17,null],[11,"insert","","Inserts a new element into the `RBTree`.",17,null],[11,"new","","Creates an empty `RBTree`.",18,{"inputs":[{"name":"a"}],"output":{"name":"rbtree"}}],[11,"is_empty","","Returns `true if the`RBTree` is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor","","Returns a null `Cursor` for this tree.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"cursor_mut","","Returns a null `CursorMut` for this tree.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",18,null],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",18,null],[11,"front","","Returns a `Cursor` pointing to the first element of the tree. If the tree is empty then a null cursor is returned.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the tree. If the the tree is empty then a null cursor is returned.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"back","","Returns a `Cursor` pointing to the last element of the tree. If the tree is empty then a null cursor is returned.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the tree. If the tree is empty then a null cursor is returned.",18,{"inputs":[{"name":"self"}],"output":{"name":"cursormut"}}],[11,"iter","","Gets an iterator over the objects in the `RBTree`, in ascending key order.",18,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Removes all elements from the `RBTree`.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fast_clear","","Empties the `RBTree` without unlinking or freeing objects in it.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"take","","Takes all the elements out of the `RBTree`, leaving it empty. The taken elements are returned as a new `RBTree`.",18,{"inputs":[{"name":"self"}],"output":{"name":"rbtree"}}],[11,"find","","Returns a `Cursor` pointing to an element with the given key. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"cursor"}}],[11,"find_mut","","Returns a `CursorMut` pointing to an element with the given key. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"cursormut"}}],[11,"lower_bound","","Returns a `Cursor` pointing to the lowest element whose key is above the given bound. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"cursor"}}],[11,"lower_bound_mut","","Returns a `CursorMut` pointing to the first element whose key is above the given bound. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"cursormut"}}],[11,"upper_bound","","Returns a `Cursor` pointing to the last element whose key is below the given bound. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"cursor"}}],[11,"upper_bound_mut","","Returns a `CursorMut` pointing to the last element whose key is below the given bound. If no such element is found then a null cursor is returned.",18,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"cursormut"}}],[11,"insert","","Inserts a new element into the `RBTree`.",18,null],[11,"entry","","Returns an `Entry` for the given key which contains a `CursorMut` to an element with the given key or an `InsertCursor` which points to a place in which to insert a new element with the given key.",18,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"entry"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the tree, starting at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\". Thus `range(Unbounded, Unbounded)` will yield the whole collection.",18,{"inputs":[{"name":"self"},{"name":"bound"},{"name":"bound"}],"output":{"name":"iter"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",18,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"rbtree"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","Inserts a new element into the `RBTree` at the location indicated by this `InsertCursor`.",19,null],[11,"or_insert","","Inserts an element into the `RBTree` if the entry is vacant, returning a `CursorMut` to the resulting value. If the entry is occupied then a `CursorMut` pointing to the element is returned.",14,null],[11,"or_insert_with","","Calls the given function and inserts the result into the `RBTree` if the entry is vacant, returning a `CursorMut` to the resulting value. If the entry is occupied then a `CursorMut` pointing to the element is returned and the function is not executed.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cursormut"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"IntrusivePointer","intrusive_collections","Trait representing an owned pointer type which can be converted to and from a raw pointer.",null,null],[10,"into_raw","","Consumes the owned pointer and returns a raw pointer to the owned object.",22,null],[10,"from_raw","","Constructs an owned pointer from a raw pointer which was previously returned by `into_raw`.",22,null],[8,"Adapter","","Trait for a adapter which allows a type to be inserted into an intrusive collection. The `Link` type contains the collection-specific metadata which allows an object to be inserted into an intrusive collection. This type needs to match the collection type (eg. `LinkedListLink` for inserting in a `LinkedList`).",null,null],[16,"Link","","Collection-specific link type which allows an object to be inserted in an intrusive collection.",23,null],[16,"Value","","Object type which is inserted in an intrusive collection.",23,null],[16,"Pointer","","Pointer type which owns an instance of a value.",23,null],[10,"get_value","","Gets a reference to an object from a reference to a link in that object.",23,null],[10,"get_link","","Gets a reference to the link for the given object.",23,null],[8,"KeyAdapter","","Extension of the `Adapter` trait to provide a way of extracting a key from an object. This key can then be used as an index in certain intrusive collections (currently only `RBTree` uses this).",null,null],[16,"Key","","Type of the key returned by `get_key`.",24,null],[10,"get_key","","Gets the key for the given object.",24,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[14,"offset_of_unsafe","","Macro to get the offset of a struct field in bytes from the address of the struct.",null,null],[14,"offset_of","","Macro to get the offset of a struct field in bytes from the address of the struct.",null,null],[14,"container_of","","Unsafe macro to get a raw pointer to an outer object from a pointer to one of its fields.",null,null],[14,"intrusive_adapter","","Macro to generate an implementation of `Adapter` for a given set of types. In particular this will automatically generate implementations of the `get_value` and `get_link` methods for a given named field in a struct.",null,null]],"paths":[[4,"Bound"],[3,"UnsafeRef"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"SinglyLinkedList"],[3,"Iter"],[3,"IntoIter"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedList"],[3,"Iter"],[3,"IntoIter"],[4,"Entry"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"RBTree"],[3,"InsertCursor"],[3,"Iter"],[3,"IntoIter"],[8,"IntrusivePointer"],[8,"Adapter"],[8,"KeyAdapter"]]};
initSearch(searchIndex);
