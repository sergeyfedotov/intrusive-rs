initSidebarItems({"enum":[["Bound","An endpoint of a range of keys."]],"macro":[["container_of","Unsafe macro to get a raw pointer to an outer object from a pointer to one of its fields."],["intrusive_adapter","Macro to generate an implementation of `Adapter` for a given set of types. In particular this will automatically generate implementations of the `get_value` and `get_link` methods for a given named field in a struct."],["offset_of","Macro to get the offset of a struct field in bytes from the address of the struct."],["offset_of_unsafe","Macro to get the offset of a struct field in bytes from the address of the struct."]],"mod":[["linked_list","Intrusive doubly-linked list."],["rbtree","Intrusive red-black tree."],["singly_linked_list","Intrusive singly-linked list."]],"struct":[["UnsafeRef","Unchecked shared pointer"]],"trait":[["Adapter","Trait for a adapter which allows a type to be inserted into an intrusive collection. The `Link` type contains the collection-specific metadata which allows an object to be inserted into an intrusive collection. This type needs to match the collection type (eg. `LinkedListLink` for inserting in a `LinkedList`)."],["IntrusivePointer","Trait representing an owned pointer type which can be converted to and from a raw pointer."],["KeyAdapter","Extension of the `Adapter` trait to provide a way of extracting a key from an object. This key can then be used as an index in certain intrusive collections (currently only `RBTree` uses this)."]]});